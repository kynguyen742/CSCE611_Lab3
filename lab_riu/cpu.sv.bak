module cpu(input reg [31:0]io_in, input reg clk, input reg rst_n, output reg [31:0]io_out);
	logic [31:0] inst_ram [4095:0];
	initial $readmemh("test1.txt",inst_ram);

	
	logic [11:0] PC_FETCH;
	
	// Input
	 reg [31:0] instruction_EX;
	
	//instructions cpu_EXecution formats
	logic [4:0] regdest_WB;
	logic [31:0] A_EX;
	logic [31:0] B_EX;
	
	logic [4:0] rd_cpu_EX;
	logic [4:0] rs1_cpu_EX;
	logic [6:0] opcode_cpu_EX;
	logic [2:0] funct3_cpu_EX;
	logic [4:0] rs2_cpu_EX;
	logic [6:0] funct7_cpu_EX;
	logic [11:0] imm12_cpu_EX;
	logic [19:0] imm20_cpu_EX;
		
	//ControlUnit EXecutions format
	logic alusrc_cpu_EX;
	logic [3:0] aluop_cpu_EX;
	logic regwrite_cpu_EX;
	logic regwrite_cpu_WB;
	logic [2:0] regsel_cpu_EX;
	logic [2:0] regsel_cpu_WB;
	logic [31:0] lui_cpu_EX;
	logic gpio_we_EX;
	logic [31:0] writedata_cpu_WB;
	
	logic [31:0] r_cpu_EX;
	logic [31:0] r_cpu_WB;
	
	logic zero_cpu;
	
	 logic [31:0] readdata1_EX;
	logic [31:0] regdata2_EX;
	
	logic [31:0] io_in_WB;

	
	always@(posedge clk) begin
		if (~rst_n) begin
			PC_FETCH <= 12'd0;
			instruction_EX <= 32'd0;
		end else begin
			PC_FETCH <= PC_FETCH + 1'b1;
			instruction_EX <= inst_ram[PC_FETCH];
		end
	end
	
	
	//pipeline and updates the processor
	always@(posedge clk) begin
		regdest_WB <= instruction_EX[11:7];
	if(~rst_n)
	io_out<=32'b0;	
		else if(gpio_we_EX) io_out <= A_EX;
		//$display("%h", io_out);
		regwrite_cpu_WB <= regwrite_cpu_EX;
		regsel_cpu_WB <= regsel_cpu_EX;
		io_in_WB <= io_in;
		lui_cpu_EX <= {instruction_EX[31:12],12'b0};
		r_cpu_WB <= r_cpu_EX;
	end
	

	//sign extend selection
	assign B_EX = (alusrc_cpu_EX == 1'b0) ? regdata2_EX: {{20{instruction_EX[31]}}, instruction_EX[31:0]};
	
	//implement multiflexers
	assign writedata_cpu_WB = regsel_cpu_WB == 2'b00 ? io_in_WB: regsel_cpu_WB == 2'b01 ? lui_cpu_EX: r_cpu_WB;
	
	//call decoder
	decoder cpu_dc (.instruction(instruction_EX), .opcode(opcode_cpu_EX), .rd(rd_cpu_EX), .funct3(funct3_cpu_EX), 
							.funct7(funct7_cpu_EX), .imm12(imm12_cpu_EX), .imm20(imm20_cpu_EX), .rs1(rs1_cpu_EX), .rs2(rs2_cpu_EX));
	//call alu						
	alu cpu_alu(.A(A_EX),.B(B_EX),.op(aluop_cpu_EX),.R(r_cpu_EX),.zero(zero_cpu));
	


	//call regfle
	regfile regfile_cpu(.clk(clk), .we(regwrite_cpu_EX), .readaddr1(instruction_EX[19:15]), .readaddr2(instruction_EX[24:20]), 
			.writeaddr(regdest_WB), .writedata(writedata_cpu_WB), .readdata1(A_EX), .readdata2(regdata2_EX));
			
	//call ControlUnit		
	ControlUnit cu(.opcode_EX(opcode_cpu_EX), .funct3_EX(funct3_cpu_EX),
								.funct7_EX(funct7_cpu_EX),.imm12_EX(imm12_cpu_EX),
								.imm20_EX(imm20_cpu_EX), .rs1(rs1_cpu_EX), .rs2(rs2_cpu_EX), .rd(rd_cpu_EX),
								.alusrc(alusrc_cpu_EX), .aluop(aluop_cpu_EX), .regwrite(regwrite_cpu_EX), .regsel(regsel_cpu_EX), .gpio_we(gpio_we_EX));
	
endmodule
